#ifndef NODE_H_
#define NODE_H_
#include "Element.h"
#include <iostream>
class Node
{
  private:
    Element e;
    Node *firstHijo,*nextPrimo;
  public:
    Node();
    Node(Element newe);
    Node(Element newe, Node *first, Node *next);
    Node(Node& n);
    Element element();
    Node *firstChild();
    Node *nextSibling();
    void setElement(Element newe);
    void setFirstChild(Node *first);
    void setNextSibling(Node *next);
    Node operator=(Node& n);
};

//constructores

Node::Node() : e(), firstHijo(NULL), nextPrimo(NULL){};

Node::Node(Element newe) : e(newe), firstHijo(NULL), nextPrimo(NULL){};

Node::Node(Element newe, Node *first, Node *next) : e(newe), firstHijo(first), nextPrimo(next){};

//constructor copia
Node::Node(Node& n) : e(n.element()), firstHijo(n.firstChild()), nextPrimo(n.nextSibling()){};

//Observadores
Node *Node::firstChild(){return firstHijo;}

Node *Node::nextSibling(){return nextPrimo;}

Element Node::element(){return e;}

//Modificadores
void Node::setElement(Element newe){e=newe;}

void Node::setFirstChild(Node *first){firstHijo=first;}

void Node::setNextSibling(Node *next){nextPrimo=next;}

//sobrecarga =
Node Node::operator=(Node& n)
{
  e=n.element();
  firstHijo=n.firstChild();
  nextPrimo=n.nextSibling();
}

#endif
